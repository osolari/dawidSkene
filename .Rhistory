J = sum(!is.na(unique(as.vector(f))))  #sum(!is.na(unique(unlist(apply(X = f, MARGIN = 2, unique)), na.rm = T)))
K = dim(f)[2]
N <- array(NA, dim = c(I, J, K)) #
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
N[i,j,k] <- sum(f[i,k]== j, na.rm = T)
}
}
}
N
dim(f)
dim(N)
Tinit <- matrix(0, nrow = dim(f)[1], ncol = J)
for (i in 1:I){
for (j in 1:J){
Tinit[i,j] <- sum(N[i,j,])/sum(N[i,,])
}
}
T_ij <- Tinit
T_ij
for (iter in 1:40){
### Step ii: Estimate PI_ij and p_j #checked
PI <- array(data = NA, dim = c(J,J,K))
for (k in 1:K){
for (j in 1:J){
for (l in 1:J){
PI[j,l,k] <-  T_ij[,j] %*% N[,l,k] / sum(T_ij[,j] %*% N[,,k])
}
}
}
P <- array(data = NA, dim = J) #Check
P <- colSums(T_ij)/I #Check
### Step iii: estimating new true labels
TijNew <- array(data = 1, dim = c(I,J))
for (i in 1:I){
for (k in 1:K){
for (l in 1:J){
TijNew[i,] <- TijNew[i,] * PI[,l,k] ^ N[i,l,k]
}
}
TijNew[i,] <- (TijNew[i,] * P)/sum(TijNew[i,] * P)
}
#   TijNew <- array(data = 1, dim = c(I,J))
#   for (i in 1:I){
#     for (k in 1:K){
#       for (l in 1:J){
#         TijNew[i,] <- TijNew[i,] * PI[,l,k] ^ N[i,l,k] * P
#       }
#     }
#     TijNew[i,] <- TijNew[i,]/sum(TijNew[i,])
#   }
T_ij <- TijNew
}
T_ij
rowSums(f)
rawFish <- read.table("~/Dropbox/population_genomics_project_collaboration/pairwise_comparison/fish.csv",
sep = ",", header = T, row.names = 1, stringsAsFactors = F)
head(rawFish)
summary(rawFish)
fish <- rawFish
fish[fish == "True"] <- 1
fish[fish == "False"] <- 0
fish <- apply(fish, 2, as.numeric)
rownames(fish) <- rownames(rawFish)
head(fish)
summary(fish)
f
f <- fish[1:100,]
f
I = dim(f)[1]
J = sum(!is.na(unique(as.vector(f))))  #sum(!is.na(unique(unlist(apply(X = f, MARGIN = 2, unique)), na.rm = T)))
K = dim(f)[2]
N <- array(NA, dim = c(I, J, K)) #
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
N[i,j,k] <- sum(f[i,k]== j, na.rm = T)
}
}
}
Tinit <- matrix(0, nrow = dim(f)[1], ncol = J)
for (i in 1:I){
for (j in 1:J){
Tinit[i,j] <- sum(N[i,j,])/sum(N[i,,])
}
}
T_ij <- Tinit
for (iter in 1:40){
### Step ii: Estimate PI_ij and p_j #checked
PI <- array(data = NA, dim = c(J,J,K))
for (k in 1:K){
for (j in 1:J){
for (l in 1:J){
PI[j,l,k] <-  T_ij[,j] %*% N[,l,k] / sum(T_ij[,j] %*% N[,,k])
}
}
}
P <- array(data = NA, dim = J) #Check
P <- colSums(T_ij)/I #Check
### Step iii: estimating new true labels
TijNew <- array(data = 1, dim = c(I,J))
for (i in 1:I){
for (k in 1:K){
for (l in 1:J){
TijNew[i,] <- TijNew[i,] * PI[,l,k] ^ N[i,l,k]
}
}
TijNew[i,] <- (TijNew[i,] * P)/sum(TijNew[i,] * P)
}
#   TijNew <- array(data = 1, dim = c(I,J))
#   for (i in 1:I){
#     for (k in 1:K){
#       for (l in 1:J){
#         TijNew[i,] <- TijNew[i,] * PI[,l,k] ^ N[i,l,k] * P
#       }
#     }
#     TijNew[i,] <- TijNew[i,]/sum(TijNew[i,])
#   }
T_ij <- TijNew
}
T_ij
rawFish <- read.table("~/Dropbox/population_genomics_project_collaboration/pairwise_comparison/fish.csv",
sep = ",", header = T, row.names = 1, stringsAsFactors = F)
head(rawFish)
summary(rawFish)
fish <- rawFish
N
rawFish <- read.table("~/Dropbox/population_genomics_project_collaboration/pairwise_comparison/fish.csv",
sep = ",", header = T, row.names = 1, stringsAsFactors = F)
head(rawFish)
summary(rawFish)
fish <- rawFish
fish[fish == "True"] <- 2
fish[fish == "False"] <- 1
fish <- apply(fish, 2, as.numeric)
rownames(fish) <- rownames(rawFish)
head(fish)
summary(fish)
f <- fish[1:100,]
I = dim(f)[1]
J = sum(!is.na(unique(as.vector(f))))  #sum(!is.na(unique(unlist(apply(X = f, MARGIN = 2, unique)), na.rm = T)))
K = dim(f)[2]
N <- array(NA, dim = c(I, J, K)) #
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
N[i,j,k] <- sum(f[i,k]== j, na.rm = T)
}
}
}
Tinit <- matrix(0, nrow = dim(f)[1], ncol = J)
for (i in 1:I){
for (j in 1:J){
Tinit[i,j] <- sum(N[i,j,])/sum(N[i,,])
}
}
T_ij <- Tinit
for (iter in 1:40){
### Step ii: Estimate PI_ij and p_j #checked
PI <- array(data = NA, dim = c(J,J,K))
for (k in 1:K){
for (j in 1:J){
for (l in 1:J){
PI[j,l,k] <-  T_ij[,j] %*% N[,l,k] / sum(T_ij[,j] %*% N[,,k])
}
}
}
P <- array(data = NA, dim = J) #Check
P <- colSums(T_ij)/I #Check
### Step iii: estimating new true labels
TijNew <- array(data = 1, dim = c(I,J))
for (i in 1:I){
for (k in 1:K){
for (l in 1:J){
TijNew[i,] <- TijNew[i,] * PI[,l,k] ^ N[i,l,k]
}
}
TijNew[i,] <- (TijNew[i,] * P)/sum(TijNew[i,] * P)
}
#   TijNew <- array(data = 1, dim = c(I,J))
#   for (i in 1:I){
#     for (k in 1:K){
#       for (l in 1:J){
#         TijNew[i,] <- TijNew[i,] * PI[,l,k] ^ N[i,l,k] * P
#       }
#     }
#     TijNew[i,] <- TijNew[i,]/sum(TijNew[i,])
#   }
T_ij <- TijNew
}
T_ij
as.integer(T_ij[,2] > .5)
rowSums(f -1)
f
f-1
fish-1
rowSums(fish-1)
histogram(rowSums(fish-1))
hist(rowSums(fish-1))
max(rowSums(fish-1))
sort(rowSums(fish-1))
sort(rowSums(fish-1), decreasing = T)
f <- dataGen()
I = dim(f)[1]
J = sum(!is.na(unique(as.vector(f))))  #sum(!is.na(unique(unlist(apply(X = f, MARGIN = 2, unique)), na.rm = T)))
K = dim(f)[2]
N <- array(NA, dim = c(I, J, K)) #
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
N[i,j,k] <- sum(f[i,k]== j, na.rm = T)
}
}
}
Tinit <- matrix(0, nrow = dim(f)[1], ncol = J)
for (i in 1:I){
for (j in 1:J){
Tinit[i,j] <- sum(N[i,j,])/sum(N[i,,])
}
}
T_ij <- Tinit
for (iter in 1:40){
### Step ii: Estimate PI_ij and p_j #checked
PI <- array(data = NA, dim = c(J,J,K))
for (k in 1:K){
for (j in 1:J){
for (l in 1:J){
PI[j,l,k] <-  T_ij[,j] %*% N[,l,k] / sum(T_ij[,j] %*% N[,,k])
}
}
}
P <- array(data = NA, dim = J) #Check
P <- colSums(T_ij)/I #Check
### Step iii: estimating new true labels
TijNew <- array(data = 1, dim = c(I,J))
for (i in 1:I){
for (k in 1:K){
for (l in 1:J){
TijNew[i,] <- TijNew[i,] * PI[,l,k] ^ N[i,l,k]
}
}
TijNew[i,] <- (TijNew[i,] * P)/sum(TijNew[i,] * P)
}
#   TijNew <- array(data = 1, dim = c(I,J))
#   for (i in 1:I){
#     for (k in 1:K){
#       for (l in 1:J){
#         TijNew[i,] <- TijNew[i,] * PI[,l,k] ^ N[i,l,k] * P
#       }
#     }
#     TijNew[i,] <- TijNew[i,]/sum(TijNew[i,])
#   }
T_ij <- TijNew
}
T_ij
f <- dataGen()
I = dim(f)[1]
J = sum(!is.na(unique(as.vector(f))))  #sum(!is.na(unique(unlist(apply(X = f, MARGIN = 2, unique)), na.rm = T)))
K = dim(f)[2]
N <- array(NA, dim = c(I, J, K)) #
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
N[i,j,k] <- sum(f[i,k,]== j, na.rm = T)
}
}
}
N
Tinit <- matrix(0, nrow = dim(f)[1], ncol = J)
for (i in 1:I){
for (j in 1:J){
Tinit[i,j] <- sum(N[i,j,])/sum(N[i,,])
}
}
T_ij <- Tinit
T_ij
f <- fish
I = dim(f)[1]
J = sum(!is.na(unique(as.vector(f))))  #sum(!is.na(unique(unlist(apply(X = f, MARGIN = 2, unique)), na.rm = T)))
K = dim(f)[2]
N <- array(NA, dim = c(I, J, K)) #
N <- array(NA, dim = c(I, J, K)) #
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
N[i,j,k] <- sum(f[i,k]== j, na.rm = T)
}
}
}
Tinit <- matrix(0, nrow = dim(f)[1], ncol = J)
for (i in 1:I){
for (j in 1:J){
Tinit[i,j] <- sum(N[i,j,])/sum(N[i,,])
}
}
T_ij <- Tinit
T_ij
head(T_ij)
head(f)
which(rowSums(f) == 5)
which(rowSums(f) == 4)
sum(rowSums(f) == 4)
sum(rowSums(f-1) == 4)
sum(rowSums(f-1) == 5)
which(rowSums(f-1) == 5)
T_ij[1771]
T_ij[1771,]
T_ij[17771,]
f[17771,]
5/8
for (iter in 1:40){
### Step ii: Estimate PI_ij and p_j #checked
PI <- array(data = NA, dim = c(J,J,K))
for (k in 1:K){
for (j in 1:J){
for (l in 1:J){
PI[j,l,k] <-  T_ij[,j] %*% N[,l,k] / sum(T_ij[,j] %*% N[,,k])
}
}
}
P <- array(data = NA, dim = J) #Check
P <- colSums(T_ij)/I #Check
### Step iii: estimating new true labels
TijNew <- array(data = 1, dim = c(I,J))
for (i in 1:I){
for (k in 1:K){
for (l in 1:J){
TijNew[i,] <- TijNew[i,] * PI[,l,k] ^ N[i,l,k]
}
}
TijNew[i,] <- (TijNew[i,] * P)/sum(TijNew[i,] * P)
}
#   TijNew <- array(data = 1, dim = c(I,J))
#   for (i in 1:I){
#     for (k in 1:K){
#       for (l in 1:J){
#         TijNew[i,] <- TijNew[i,] * PI[,l,k] ^ N[i,l,k] * P
#       }
#     }
#     TijNew[i,] <- TijNew[i,]/sum(TijNew[i,])
#   }
T_ij <- TijNew
}
T_ij
P
PI
T_ij[,2] > .5
output <- list(list("T"= T_ij, "Pi"= PI, "P" = P, "N" = N, "class" = as.integer(T_ij[,2] > .5)))
save(output, file = "~/Dropbox/population_genomics_project_collaboration/pairwise_comparison/fish.Rdat")
landUse <- read.table("~/Dropbox/population_genomics_project_collaboration/pairwise_comparison/landUse.csv",
sep = ",", header = T, row.names = 1, stringsAsFactors = F)
output <- list(list("f" = f, "T"= T_ij, "Pi"= PI, "P" = P, "N" = N, "class" = as.integer(T_ij[,2] > .5)))
save(output, file = "~/Dropbox/population_genomics_project_collaboration/pairwise_comparison/fish.Rdat")
head(f)
rownamesLU <- rownames(landUse)
landUse[landUse == "True"] <- 2
landUse[landUse == "False"] <- 1
landUse <- apply(landUse, 2, as.numeric)
rownames(landUse) <- rownamesLU
f <- landUse
I = dim(f)[1]
J = sum(!is.na(unique(as.vector(f))))  #sum(!is.na(unique(unlist(apply(X = f, MARGIN = 2, unique)), na.rm = T)))
K = dim(f)[2]
N <- array(NA, dim = c(I, J, K)) #
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
N[i,j,k] <- sum(f[i,k]== j, na.rm = T)
}
}
}
Tinit <- matrix(0, nrow = dim(f)[1], ncol = J)
for (i in 1:I){
for (j in 1:J){
Tinit[i,j] <- sum(N[i,j,])/sum(N[i,,])
}
}
T_ij <- Tinit
head(T_ij)
head(f)
head(f, 20)
head(T_ij, 20)
for (iter in 1:40){
### Step ii: Estimate PI_ij and p_j #checked
PI <- array(data = NA, dim = c(J,J,K))
for (k in 1:K){
for (j in 1:J){
for (l in 1:J){
PI[j,l,k] <-  T_ij[,j] %*% N[,l,k] / sum(T_ij[,j] %*% N[,,k])
}
}
}
P <- array(data = NA, dim = J) #Check
P <- colSums(T_ij)/I #Check
### Step iii: estimating new true labels
TijNew <- array(data = 1, dim = c(I,J))
for (i in 1:I){
for (k in 1:K){
for (l in 1:J){
TijNew[i,] <- TijNew[i,] * PI[,l,k] ^ N[i,l,k]
}
}
TijNew[i,] <- (TijNew[i,] * P)/sum(TijNew[i,] * P)
}
#   TijNew <- array(data = 1, dim = c(I,J))
#   for (i in 1:I){
#     for (k in 1:K){
#       for (l in 1:J){
#         TijNew[i,] <- TijNew[i,] * PI[,l,k] ^ N[i,l,k] * P
#       }
#     }
#     TijNew[i,] <- TijNew[i,]/sum(TijNew[i,])
#   }
T_ij <- TijNew
}
output <- list(list("f" = f, "T"= T_ij, "Pi"= PI, "P" = P, "N" = N, "class" = as.integer(T_ij[,2] > .5)))
save(output, file = "~/Dropbox/population_genomics_project_collaboration/pairwise_comparison/landUse.Rdat")
parasites <- read.table("~/Dropbox/population_genomics_project_collaboration/pairwise_comparison/parasites.csv",
sep = ",", header = T, row.names = 1, stringsAsFactors = F)
rownamesP <- rownames(parasites)
parasites[parasites == "True"] <- 2
parasites[parasites == "False"] <- 1
parasites <- apply(parasites, 2, as.numeric)
rownames(parasites) <- rownamesP
I = dim(f)[1]
J = sum(!is.na(unique(as.vector(f))))  #sum(!is.na(unique(unlist(apply(X = f, MARGIN = 2, unique)), na.rm = T)))
K = dim(f)[2]
N <- array(NA, dim = c(I, J, K)) #
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
N[i,j,k] <- sum(f[i,k]== j, na.rm = T)
}
}
}
Tinit <- matrix(0, nrow = dim(f)[1], ncol = J)
for (i in 1:I){
for (j in 1:J){
Tinit[i,j] <- sum(N[i,j,])/sum(N[i,,])
}
}
T_ij <- Tinit
head(T_ij, 20)
head(f, 20)
f <- parasites
I = dim(f)[1]
J = sum(!is.na(unique(as.vector(f))))  #sum(!is.na(unique(unlist(apply(X = f, MARGIN = 2, unique)), na.rm = T)))
K = dim(f)[2]
N <- array(NA, dim = c(I, J, K)) #
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
N[i,j,k] <- sum(f[i,k]== j, na.rm = T)
}
}
}
Tinit <- matrix(0, nrow = dim(f)[1], ncol = J)
for (i in 1:I){
for (j in 1:J){
Tinit[i,j] <- sum(N[i,j,])/sum(N[i,,])
}
}
T_ij <- Tinit
head(T_ij, 20)
head(f, 20)
head(T_ij, 30)
head(f, 30)
for (iter in 1:40){
### Step ii: Estimate PI_ij and p_j #checked
PI <- array(data = NA, dim = c(J,J,K))
for (k in 1:K){
for (j in 1:J){
for (l in 1:J){
PI[j,l,k] <-  T_ij[,j] %*% N[,l,k] / sum(T_ij[,j] %*% N[,,k])
}
}
}
P <- array(data = NA, dim = J) #Check
P <- colSums(T_ij)/I #Check
### Step iii: estimating new true labels
TijNew <- array(data = 1, dim = c(I,J))
for (i in 1:I){
for (k in 1:K){
for (l in 1:J){
TijNew[i,] <- TijNew[i,] * PI[,l,k] ^ N[i,l,k]
}
}
TijNew[i,] <- (TijNew[i,] * P)/sum(TijNew[i,] * P)
}
#   TijNew <- array(data = 1, dim = c(I,J))
#   for (i in 1:I){
#     for (k in 1:K){
#       for (l in 1:J){
#         TijNew[i,] <- TijNew[i,] * PI[,l,k] ^ N[i,l,k] * P
#       }
#     }
#     TijNew[i,] <- TijNew[i,]/sum(TijNew[i,])
#   }
T_ij <- TijNew
}
output <- list(list("f" = f, "T"= T_ij, "Pi"= PI, "P" = P, "N" = N, "class" = as.integer(T_ij[,2] > .5)))
save(output, file = "~/Dropbox/population_genomics_project_collaboration/pairwise_comparison/parasites.Rdat")
T_ij
output$
names(output)
summmary(output)
summary(output)
output$f
output <- list("f" = f, "T"= T_ij, "Pi"= PI, "P" = P, "N" = N, "class" = as.integer(T_ij[,2] > .5))
save(output, file = "~/Dropbox/population_genomics_project_collaboration/pairwise_comparison/parasites.Rdat")
output$class
